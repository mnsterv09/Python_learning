import  os
from scapy.all import ICMP, IP, sr1, TCP, sr
from ipaddress import ip_network
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock

print_lock = Lock()

def ping(host):
    response = sr1(IP(dst=host)/ICMP(), timeout=1, verbose=0)
    if response is not None:
        return str(host)
    return None

def ping_sweep(network, netmask):
    live_hosts = []

    num_threads = os.cpu_count() * 2  # Adjust based on system capabilities
    host = list(ip_network(network + '/' + netmask).hosts())
    total_hosts = len(hosts)

    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = {executor.submit(ping, host): host for host in hosts}
        for i, future in enumerate(as_completed(futures), start=1):
          host = futures[future]
          result = future.result()
          with print_lock:
              print(f"Scanning: {host} ({i}/{total_hosts})", end="\r")
          if result is not None:
              live_hosts.append(result)
    return live_hosts

def scan_port(args):   
    ip, port = args
    response = sr(IP(dst=ip)/TCP(dport=port, flags='S'), timeout=1, verbose=0)
    if response is not None and response[TCP].flags == "SA":
        return f"Port {port} is open on {ip}"
    return None

def port_scan(ip, ports):
    open_ports = []
    num_threads = os.cpu_count() * 2  # Adjust based on system capabilities
    total_ports = len(ports)
    
    args = [(ip, port) for port in ports]

    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = {executor.submit(scan_port, arg): arg for arg in args}
        for future in as_completed(futures):
            result = future.result()
            with print_lock:
                print(f"Scanning: {ip} ({len(open_ports)}/{total_ports})", end="\r")
            if result is not None:
                open_ports.append(result)
    return open_ports

live_hosts = ping_sweep(network, netmask)

host_port_maping = {}
ports = range(1, 1025)  # Common ports to scan
for host in live_hosts:
    open_ports = port_scan(host, ports)
    host_port_maping[host] = open_ports

print(host_port_maping)

if __name__ == "__main__":
    import sys
    network = sys.argv[1]
    netmask = sys.argv[2]
    host_port_maping = get_live_hosts_and_ports(network, netmask)
    for host, ports in host_port_maping.items():
        print(f"Host: {host}, has the following open ports: {open_ports}")
                